name: Run Spark Unit Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'spark_df_utils/**'
      - 'tests/**'
      - 'requirements*.txt'
      - 'setup.py'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'spark_df_utils/**'
      - 'tests/**'
      - 'requirements*.txt'
      - 'setup.py'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ubuntu-latest
        python-version: '3.11'
        spark-version: '3.4.0'
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyspark==${{ matrix.spark-version }}
        pip install -r requirements-test.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 spark_df_utils tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 spark_df_utils tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests with pytest
      run: |
        pytest tests/ -v --cov=spark_df_utils --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10' && matrix.spark-version == '3.5.0' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-spark${{ matrix.spark-version }}
        path: |
          htmlcov/
          .coverage
          coverage.xml

  quality-checks:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install quality check tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy pylint bandit

    - name: Check code formatting with black
      run: |
        black --check spark_df_utils tests

    - name: Check import sorting with isort
      run: |
        isort --check-only spark_df_utils tests

    - name: Type checking with mypy
      run: |
        pip install -r requirements.txt
        mypy spark_df_utils --ignore-missing-imports

    - name: Security check with bandit
      run: |
        bandit -r spark_df_utils -ll

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -e .

    - name: Run integration tests
      run: |
        pytest tests/ -v -m "not unit" --maxfail=3

    - name: Generate test report
      if: always()
      run: |
        pip install pytest-html
        pytest tests/ --html=report.html --self-contained-html

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-report
        path: report.html